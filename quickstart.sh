#!/bin/bash
# Quick start script for RapidOCR Service

echo "🚀 RapidOCR FastAPI Service Setup Complete!"
echo "==========================================="
echo ""
echo "📋 Project Summary:"
echo "- FastAPI service with GPU-accelerated OCR processing"
echo "- UUID-based file tracking and management"
echo "- Comprehensive structured logging"
echo "- Multi-image upload support"
echo "- Automatic temporary file cleanup"
echo "- Docker containerization ready"
echo ""
echo "🔧 Requirements Met:"
echo "✅ Python 3.13+ with uv package management"
echo "✅ FastAPI framework with automatic API documentation"
echo "✅ RapidOCR integration with GPU detection"
echo "✅ Structured logging with request tracking"
echo "✅ UUID generation for image tracking"
echo "✅ Temporary file management with cleanup"
echo "✅ Multi-image processing support"
echo "✅ JSON response format: [{FileName, UUID, Context}]"
echo ""
echo "🚀 Quick Start Commands:"
echo ""
echo "1. Start the service:"
echo "   uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
echo ""
echo "2. Test health endpoint:"
echo "   curl http://localhost:8000/health"
echo ""
echo "3. Process single image:"
echo "   curl -X POST \"http://localhost:8000/ocr\" -F \"file=@image.jpg\""
echo ""
echo "4. Process multiple images:"
echo "   curl -X POST \"http://localhost:8000/ocr\" -F \"file=@image1.jpg\" -F \"file=@image2.png\""
echo ""
echo "5. View API documentation:"
echo "   http://localhost:8000/docs (Swagger UI)"
echo "   http://localhost:8000/redoc (ReDoc)"
echo ""
echo "6. Run tests:"
echo "   uv run pytest tests/ -v"
echo ""
echo "7. Build and run with Docker:"
echo "   docker-compose up --build"
echo ""
echo "📁 Project Structure:"
echo "app/                  - Main application code"
echo "├── main.py             - FastAPI application"
echo "├── config.py           - Configuration settings"
echo "├── models.py           - Pydantic data models"
echo "├── ocr_service.py      - OCR processing logic"
echo "├── gpu_utils.py        - GPU detection utilities"
echo "├── file_manager.py     - File management & cleanup"
echo "└── logging_config.py   - Structured logging setup"
echo ""
echo "tests/                  - Test suite"
echo "temp/                   - Temporary file storage"
echo "Dockerfile             - Container configuration"
echo "docker-compose.yml     - Docker Compose setup"
echo ".env.example           - Environment variables template"
echo ""
echo "🏛️ Constitution: .specify/memory/constitution.md"
echo "📊 GPU Status: $(nvidia-smi --query-gpu=name --format=csv,noheader 2>/dev/null || echo 'No GPU detected')"
echo ""
echo "Happy OCR processing! 🔍📄"
